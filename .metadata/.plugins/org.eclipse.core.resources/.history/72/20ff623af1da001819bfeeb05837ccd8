// Generated from MacroLang.g4 by ANTLR 4.7.1
package de.loteslab.mmm.lang;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MacroLangLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.7.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, Import=2, Define=3, Each=4, ID=5, STRING=6, BlockComment=7, LineComment=8, 
		WS=9, NL=10;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"T__0", "Import", "Define", "Each", "ID", "STRING", "ESC", "UNICODE", 
		"HEX", "SAFECODEPOINT", "BlockComment", "LineComment", "WS", "NL"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'#'", null, "'define'", "'each'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, "Import", "Define", "Each", "ID", "STRING", "BlockComment", 
		"LineComment", "WS", "NL"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public MacroLangLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "MacroLang.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\f}\b\1\4\2\t\2\4"+
		"\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t"+
		"\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\6\3\6"+
		"\7\69\n\6\f\6\16\6<\13\6\3\7\3\7\3\7\7\7A\n\7\f\7\16\7D\13\7\3\7\3\7\3"+
		"\b\3\b\3\b\5\bK\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f"+
		"\3\f\3\f\7\f[\n\f\f\f\16\f^\13\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\7"+
		"\ri\n\r\f\r\16\rl\13\r\3\r\3\r\3\16\6\16q\n\16\r\16\16\16r\3\16\3\16\3"+
		"\17\3\17\5\17y\n\17\3\17\5\17|\n\17\3\\\2\20\3\3\5\4\7\5\t\6\13\7\r\b"+
		"\17\2\21\2\23\2\25\2\27\t\31\n\33\13\35\f\3\2\t\5\2C\\aac|\6\2\62;C\\"+
		"aac|\n\2$$\61\61^^ddhhppttvv\5\2\62;CHch\5\2\2!$$^^\4\2\f\f\17\17\4\2"+
		"\13\13\"\"\2\u0081\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13"+
		"\3\2\2\2\2\r\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2"+
		"\2\3\37\3\2\2\2\5!\3\2\2\2\7*\3\2\2\2\t\61\3\2\2\2\13\66\3\2\2\2\r=\3"+
		"\2\2\2\17G\3\2\2\2\21L\3\2\2\2\23R\3\2\2\2\25T\3\2\2\2\27V\3\2\2\2\31"+
		"d\3\2\2\2\33p\3\2\2\2\35{\3\2\2\2\37 \7%\2\2 \4\3\2\2\2!\"\7k\2\2\"#\7"+
		"o\2\2#$\7r\2\2$%\7q\2\2%&\7t\2\2&\'\7v\2\2\'(\3\2\2\2()\5\r\7\2)\6\3\2"+
		"\2\2*+\7f\2\2+,\7g\2\2,-\7h\2\2-.\7k\2\2./\7p\2\2/\60\7g\2\2\60\b\3\2"+
		"\2\2\61\62\7g\2\2\62\63\7c\2\2\63\64\7e\2\2\64\65\7j\2\2\65\n\3\2\2\2"+
		"\66:\t\2\2\2\679\t\3\2\28\67\3\2\2\29<\3\2\2\2:8\3\2\2\2:;\3\2\2\2;\f"+
		"\3\2\2\2<:\3\2\2\2=B\7$\2\2>A\5\17\b\2?A\5\25\13\2@>\3\2\2\2@?\3\2\2\2"+
		"AD\3\2\2\2B@\3\2\2\2BC\3\2\2\2CE\3\2\2\2DB\3\2\2\2EF\7$\2\2F\16\3\2\2"+
		"\2GJ\7^\2\2HK\t\4\2\2IK\5\21\t\2JH\3\2\2\2JI\3\2\2\2K\20\3\2\2\2LM\7w"+
		"\2\2MN\5\23\n\2NO\5\23\n\2OP\5\23\n\2PQ\5\23\n\2Q\22\3\2\2\2RS\t\5\2\2"+
		"S\24\3\2\2\2TU\n\6\2\2U\26\3\2\2\2VW\7\61\2\2WX\7,\2\2X\\\3\2\2\2Y[\13"+
		"\2\2\2ZY\3\2\2\2[^\3\2\2\2\\]\3\2\2\2\\Z\3\2\2\2]_\3\2\2\2^\\\3\2\2\2"+
		"_`\7,\2\2`a\7\61\2\2ab\3\2\2\2bc\b\f\2\2c\30\3\2\2\2de\7/\2\2ef\7/\2\2"+
		"fj\3\2\2\2gi\n\7\2\2hg\3\2\2\2il\3\2\2\2jh\3\2\2\2jk\3\2\2\2km\3\2\2\2"+
		"lj\3\2\2\2mn\b\r\2\2n\32\3\2\2\2oq\t\b\2\2po\3\2\2\2qr\3\2\2\2rp\3\2\2"+
		"\2rs\3\2\2\2st\3\2\2\2tu\b\16\2\2u\34\3\2\2\2vx\7\17\2\2wy\7\f\2\2xw\3"+
		"\2\2\2xy\3\2\2\2y|\3\2\2\2z|\7\f\2\2{v\3\2\2\2{z\3\2\2\2|\36\3\2\2\2\f"+
		"\2:@BJ\\jrx{\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}