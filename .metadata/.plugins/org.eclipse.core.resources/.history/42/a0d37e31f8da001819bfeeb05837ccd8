grammar MacroLang;

start:
	'#' (Import | Define | Each | EachEnd)
    ;

//CREATE TABLE x (id $(type.me) PRIMARY KEY)
Query:
	'roflcopter'
;

//CREATE TABLE x ( $each(listQuery, e -> e.name + " "+e.type)) )
Lambda:

;

Import:
	'import' STRING
;

Define:
	'define' FQN
;

Each:
	'each' list=FQN 'as' var=ID ('at' index=ID)? ':'
;

Json:
	JObject
	| JArray
	| STRING
    | NUMBER
    | 'true'
    | 'false'
    | 'null'
;

EachEnd:
	'endeach'
;

JObject:
	'{'

	'}'
;

JArray:
	'['

	']'
;

FQN:
	ID ('.' ID)*
;

ID:
	[a-zA-Z_][a-zA-Z_0-9]*
;

STRING
   : '"' (ESC | SAFECODEPOINT)* '"'
   ;


fragment ESC
   : '\\' (["\\/bfnrt] | UNICODE)
   ;


fragment UNICODE
   : 'u' HEX HEX HEX HEX
   ;


fragment HEX
   : [0-9a-fA-F]
   ;


fragment SAFECODEPOINT
   : ~ ["\\\u0000-\u001F]
   ;

BlockComment:   
	'/*' .*? '*/' -> skip
    ;

LineComment:   
	'--' ~[\r\n]* -> skip
	;

WS: 
	[ \t] + -> skip
	;
	
NL:
	'\r' '\n'?|'\n'
	;

END:
	NL | [$]
	;


NUMBER
   : '-'? INT ('.' [0-9] +)? EXP?
   ;


fragment INT
   : '0' | [1-9] [0-9]*
   ;

// no leading zeros

fragment EXP
   : [Ee] [+\-]? INT
   ;
